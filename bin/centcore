#! /usr/bin/perl -w
###################################################################
# Centreon is developped with GPL Licence 2.0 
#
# GPL License: http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
#
# Developped by : Julien Mathis - Romain Le Merlus
#
###################################################################
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
#    For information : contact@merethis.com
####################################################################
#
# Script init
#

use strict;
use POSIX qw(mkfifo);
use POSIX qw(setsid :sys_wait_h);
use DBI;

use File::Copy;

use vars qw($debug $LOG %status $generalcounter $stop $method);
use vars qw($mysql_user $mysql_passwd $mysql_host $mysql_database_oreon $mysql_database_ods);
use vars qw($con $ssh $installedPath);

#if (POSIX::getuid() != 0 ) { print  STDERR "You must exec with root user \n"; exit 1;}
#if ( -e $PID) { print STDERR "CentCore already in use \n"; exit 1;}

my $method = "system";

my $echo = "/bin/echo";

my $installedPath = "/srv/oreon/";
my $LOG = $installedPath."var/centcore.log";
my $PID = $installedPath."var/centcore.pid";
my $cmdFile = "/usr/local/centreon/var/centcore.cmd";

$ssh = "/usr/bin/ssh";

my $stop = 1;
my $debug = 0;
my $cfg;


# Include Configuration Data
require $installedPath."etc/conf.pm";

sub catch_zap {
	$stop = 0;
	writeLogFile("Receiving order to stop...\n");
}

sub writeLogFile($){
	open (LOG, ">> ".$LOG) || print "can't write $LOG: $!";
	print LOG time()." - ".$_[0];
	print time()." - ".$_[0];
	close LOG or warn $!;
}

my $timeBetween2SyncPerf = 60;

# Starting ODS Engine
writeLogFile("Starting ODS engine...\n");
writeLogFile("PID : ".$$."\n");

# checking if pid file exists.
if (-x $PID){
	writeLogFile("centcore already running. can't launch again....\n");
	exit(2);
}

# Writing PID
open (PID, ">> ".$PID) || print "can't write PID : $!";
print PID $$ ;
close PID or warn $!;

# Set signals
$SIG{INT}  		= \&catch_zap;
$SIG{'CHLD'} 	= 'IGNORE';

# Declare functions

sub parseRequest($);
sub GetAllNagiosServerPerfData();
sub moveCmdFile($);

# Add the handles for our programs into the readset.
# In other words, we're keeping track of these handles.

my $timeSyncPerf = 0;
while ($stop) {  
	# Select Wait
	if (moveCmdFile($cmdFile) && open(FILE, "< $cmdFile"."_read")){
		while (<FILE>){
			parseRequest($_);
		}
	}
	close(FILE);
	writeLogFile("Receiving order to stop...\n") if (!$stop);
	my $flag = 1;
	my $difTime = time() - $timeSyncPerf if (defined($timeSyncPerf) && $timeSyncPerf);
	if ($flag && ((defined($difTime) && $timeBetween2SyncPerf <= $difTime) || $timeSyncPerf == 0)){
		print "$timeBetween2SyncPerf <= $difTime\n" if (defined($timeSyncPerf) && $timeSyncPerf);
		print "Synchronize Perf \n";
		# Get PerfData on Nagios Poller
		GetAllNagiosServerPerfData();
		$timeSyncPerf = time();
	}
	print "############################################\n";
	sleep(2);	
}

sub moveCmdFile($){
	my $CMDFILE = $_[0];
	if (move($CMDFILE, $CMDFILE."_read")){
		return(1);
	}
}

sub GetAllNagiosServerPerfData(){
	CheckMySQLConnexion();
	my $sth2 = $con->prepare("SELECT id FROM `nagios_server` WHERE `localhost` = '0'");
	writeLogFile("Error when getting server properties : ".$sth2->errstr."\n") if (!$sth2->execute());
	while (my $data = $sth2->fetchrow_hashref()){
		print 'NG : '.$data->{'id'}."\n";
		GetPerfData($data->{'id'});
		GetLogFile($data->{'id'});
	}
	$sth2->finish();
	$con->disconnect();
	return;
}

# -------------------
#      Functions 
# -------------------

# Functions

sub getNagiosConfigurationField($$){
	CheckMySQLConnexion();
	my $sth2 = $con->prepare("SELECT ".$_[1]." FROM `cfg_nagios` WHERE `nagios_server_id` = '".$_[0]."'");
	writeLogFile("Error when getting server properties : ".$sth2->errstr."\n") if (!$sth2->execute());
	my $data = $sth2->fetchrow_hashref();
	return $data->{$_[1]};
}

sub getLocalOptionsField($){
	CheckMySQLConnexion();
	my $sth2 = $con->prepare("SELECT ".$_[0]." FROM `general_opt` LIMIT 1");
	writeLogFile("Error when getting general options properties : ".$sth2->errstr."\n") if (!$sth2->execute());
	my $data = $sth2->fetchrow_hashref();
	return $data->{$_[0]};
}

sub getLocalServerID(){
	CheckMySQLConnexion();
	my $sth2 = $con->prepare("SELECT id FROM `nagios_server` WHERE `localhost` = '1'");
	writeLogFile("Error when getting server properties : ".$sth2->errstr."\n") if (!$sth2->execute());
	return $sth2->fetchrow_hashref();
}

sub getServerConfig($){
	CheckMySQLConnexion();
	my $sth2 = $con->prepare("SELECT * FROM `nagios_server` WHERE `id` = '".$_[0]."'");
	writeLogFile("Error when getting server properties : ".$sth2->errstr."\n") if (!$sth2->execute());
	return $sth2->fetchrow_hashref();
}

sub CheckMySQLConnexion(){
	my $flag = 0;
	while (!defined($con) || !$con->ping){
		if (!defined($con)) {
			$con = DBI->connect("DBI:mysql:database=".$mysql_database_oreon.";host=".$mysql_host, $mysql_user, $mysql_passwd, {'RaiseError' => 0, 'PrintError' => 0, 'AutoCommit' => 1});
			if (!defined($con)) {
				writeLogFile("Error when connecting to database : ".$DBI::errstr."\n");
				sleep(2);
			}
		} else {
			sleep(2);
			undef($con);
			$con = DBI->connect("DBI:mysql:database=".$mysql_database_oreon.";host=".$mysql_host, $mysql_user, $mysql_passwd, {'RaiseError' => 0, 'PrintError' => 0, 'AutoCommit' => 1});			
			if (defined($con)) {
				$flag = 1;
				writeLogFile("DataBase became UP !\n");
			}	
		}
	}
	undef($flag);
}

#
# Send an external command on a remote server.
# Param : id_remote_server, external command
#

sub sendExternalCommand($$){
	# Init Parameters
	my $id = $_[0];
	my $cmd = $_[1];
	
	# Get command file 
	my $command_file = getNagiosConfigurationField($id, "command_file");
	# Get server informations
	my $server_info = getServerConfig($id);
	# check if ip address is defined
	if (defined($server_info->{'ns_ip_address'})){
		my $cmd = "$ssh -q ".$server_info->{'ns_ip_address'}." echo \"".$cmd."\" >> $command_file\n";
		my $stdout = `$cmd`;
	    writeLogFile("External command : poller $id : \"".$cmd."\"\n");
	    if (defined($stdout) && $stdout){
		    writeLogFile("Result : $stdout\n");
	    }
	    # Free
		undef($stdout);
	} else {
		writeLogFile("Ip address not defined for poller $id \n");
	}
	# Free
	undef($id);
	undef($cmd);
	undef($server_info);
	undef($command_file);
}

#
# Get PerfdataFile
#

sub getNagiosInformation($){

}

sub GetPerfData($){
	# init Values
	my $debug = 1;
	my $id = $_[0];

	# Get Server Infos
	my $server_info = getServerConfig($id);
	my $distantconnexion = $server_info->{'ns_ip_address'};
	
	my $distantperffile = getNagiosConfigurationField($id, "service_perfdata_file");
	my $distanttmpperffile = $distantperffile."-old";
	
	my $localbasevardir = "$installedPath/var/perfdata/$id";
	# check if directory exist
	mkdir $localbasevardir if (!-d $localbasevardir);
	
	my $localhost_id = getLocalServerID(); 
	my $localtmpperffile = "$localbasevardir/service-perfdata";
	my $localperffile = getNagiosConfigurationField($localhost_id->{'id'}, "service_perfdata_file");
	
	my $origin = $distantconnexion.":".$distanttmpperffile;
	
	writeLogFile("$ssh -q -i $distantconnexion ls -l $distantperffile | wc -l 2>> /dev/null\n") if ($debug);
	my $ls = `$ssh -q $distantconnexion ls -l $distantperffile | wc -l 2>> /dev/null`;
	
	# Check if distant perfdata file 
	if ($ls){
		# Move perfdata file in temp dir
		writeLogFile("$ssh -q $distantconnexion mv $distantperffile $distanttmpperffile\n") if ($debug);
		`$ssh -q $distantconnexion mv $distantperffile $distanttmpperffile`;
		
		# Get Perfdata file
		writeLogFile("scp -q $origin $localtmpperffile\n") if ($debug);
		`scp -q $origin $localtmpperffile`;
		
		# Remove old perfdata file 
		writeLogFile("$ssh -q $distantconnexion rm $distanttmpperffile\n") if ($debug);
		`$ssh -q $distantconnexion rm $distanttmpperffile`;
		
		# Write data from distant poller on local file for centstorage
		if (-f $localtmpperffile){
			writeLogFile("cat $localtmpperffile >> $localperffile\n") if ($debug);
			`cat $localtmpperffile >> $localperffile`;
			#`rm -f $localtmpperffile`;
		}
	}
}

sub GetLogFile($){
	# Init values
	my $id = $_[0];
	# Get Server informations
	my $server_info = getServerConfig($id);

	# Check configuration
	my $distantconnexion = $server_info->{'ns_ip_address'};
	writeLogFile("IP address not defined for poller $id\n") if (!defined($distantconnexion));	

	# Set local directory
	my $localDir = $installedPath."/var/log/nagios/$id/";
	# Create tmp directory
	mkdir $localDir if (!-d $localDir);
	if (-d $localDir){
		# Get distant log file path
		my $distantlogfile = getNagiosConfigurationField($id, "log_file");;
		my $locallogfile = $localDir."nagios.log";
		# check if we can do the transfert
		if (defined($distantconnexion) && defined($distantlogfile)){
			# check if log file exists
			my $ls = `ssh -q -i ~/.ssh/id_dsa $distantconnexion ls -l $distantlogfile | wc -l 2>> /dev/null`;
			if ($ls){
				# Get log file
				my $ret = `scp -q -i ~/.ssh/id_dsa $distantconnexion:$distantlogfile $locallogfile`;
				#writeLogFile("Cannot get log file or log file doesn't exists on poller $id") if (!$ret);
			}
		}
	} else {
		writeLogFile("Unable to create $localDir. Can get nagios log file for poller $id\n");
	}
}

#
# Send config files to a remote server 
#

sub sendConfigFile($){
	# Init Values
	my $id = $_[0];
	
	my $cfg_dir = getNagiosConfigurationField($_[0], "cfg_dir");
	my $server_info = getServerConfig($_[0]);
	my ($md5local, $md5dist, $scpe);
	
	opendir(DIR, $installedPath."/filesGeneration/nagiosCFG/$id/");
	while (my $file = readdir(DIR)){
		if ($file ne "." && $file ne ".." && $file !~ /\~/ && $file ne "nagiosCFG.DEBUG"){
			my $origin = $installedPath."/filesGeneration/nagiosCFG/".$id."/$file";
			my $dest = $server_info->{'user'}."@".$server_info->{'ns_ip_address'}.":$cfg_dir$file";

			my $stdout = `scp $origin $dest`;
			
			# Check sucessfull copy
			$md5local = `/usr/bin/md5sum $origin`;
			$md5dist  = `ssh $server_info->{'ns_ip_address'} /usr/bin/md5sum $cfg_dir$file`;
			
			my @tab_local = split(' ', $md5local);		
			my @tab_dist = split(' ', $md5dist);		
			if ($tab_local[0] ne $tab_dist[0]){
				print "Bad Copy !\n";
			}
		}
	}
	undef($cfg_dir);
}

sub restartNagios($){
	my $id = $_[0];

	my $conf = getServerConfig($id);
	my $distantconnexion = $conf->{'user'}."@".$conf->{'ns_ip_address'};
	my $cmd = "ssh $distantconnexion sudo ".$conf->{'init_script'}." restart\n";
	my $stdout = `$cmd`;
    writeLogFile("$stdout\n");
	undef($conf);
	undef($distantconnexion);
	undef($cmd);
	undef($stdout);
}

sub reloadNagios($){
	my $id = $_[0];
	
	my $conf = getServerConfig($id);
	my $distantconnexion = $conf->{'user'}."@".$conf->{'ns_ip_address'};
	my $cmd = "ssh $distantconnexion sudo ".$conf->{'init_script'}." reload\n";
	my $stdout = `$cmd`;
    writeLogFile("$stdout\n");
	undef($conf);
	undef($distantconnexion);
	undef($cmd);
	undef($stdout);
}

sub stopNagios($){
	my $id = $_[0];
	
	my $conf = getServerConfig($id);
	my $distantconnexion = $conf->{'user'}."@".$conf->{'ns_ip_address'};
	my $cmd = "ssh $distantconnexion sudo ".$conf->{'init_script'}." stop\n";
	my $stdout = `$cmd`;
    writeLogFile("$stdout\n");
	undef($conf);
	undef($distantconnexion);
	undef($cmd);
	undef($stdout);
}

sub startNagios($){
	my $id = $_[0];
	
	my $conf = getServerConfig($id);
	my $distantconnexion = $conf->{'user'}."@".$conf->{'ns_ip_address'};
	my $cmd = "ssh $distantconnexion sudo ".$conf->{'init_script'}." start\n";
	my $stdout = `$cmd`;
    writeLogFile("$stdout\n");
	undef($conf);
	undef($distantconnexion);
	undef($cmd);
	undef($stdout);
}

sub testConfig($){
	my $id = $_[0];
	
	my $cfg_dir = getNagiosConfigurationField($id, "cfg_dir");
	my $data = getServerConfig($id);
	my $distantconnexion = $data->{'user'}."@".$data->{'ns_ip_address'};
	my $cmd = "$ssh $distantconnexion sudo ".$data->{'nagios_bin'}." -v $cfg_dir/nagios.cfg";
	my $stdout = `$cmd`;
	undef($cmd);
	undef($data);
	undef($distantconnexion);
    writeLogFile("$stdout\n");
    undef($cfg_dir);
}

sub parseRequest($){
	return if (!$_[0]);
	if ($_[0] =~ /RESTART\:([0-9]*)/){
		restartNagios($1);
	} elsif ($_[0] =~ /RELOAD\:([0-9]*)/){
		reloadNagios($1);
	} elsif ($_[0] =~ /START\:([0-9]*)/){
		startNagios($1);
	} elsif ($_[0] =~ /SENDCFGFILE\:([0-9]*)/){
		sendConfigFile($1);
	} elsif ($_[0] =~ /STOP\:([0-9]*)/){
		stopNagios($1);
	} elsif ($_[0] =~ /NAGIOSTAT\:([0-9]*)/){
		;
	} elsif ($_[0] =~ /TEST\:([0-9]*)/){
		testConfig($1);
	} elsif ($_[0] =~ /EXTERNALCMD\:([0-9]*)\:([.]*)/){
		sendExternalCommand($1, $2);
	} elsif ($_[0] =~ /SYNCHRONIZEPLUGINS\:([0-9]*)\:([.]*)/){
		;
	} else {
		writeLogFile("$_[0] : UNKNWON KEY \n");
	}
}

unlink($PID);
writeLogFile("Centcore stop...\n");
exit();

__END__




