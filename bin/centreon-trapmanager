#!/usr/bin/perl -w
################################################################################
# Copyright 2005-2011 MERETHIS
# Centreon is developped by : Julien Mathis and Romain Le Merlus under
# GPL Licence 2.0.
# 
# This program is free software; you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation ; either version 2 of the License.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with 
# this program; if not, see <http://www.gnu.org/licenses>.
# 
# Linking this program statically or dynamically with other modules is making a 
# combined work based on this program. Thus, the terms and conditions of the GNU 
# General Public License cover the whole combination.
# 
# As a special exception, the copyright holders of this program give MERETHIS 
# permission to link this program with independent modules to produce an executable, 
# regardless of the license terms of these independent modules, and to copy and 
# distribute the resulting executable under terms of MERETHIS choice, provided that 
# MERETHIS also meet, for each linked independent module, the terms  and conditions 
# of the license of that module. An independent module is a module which is not 
# derived from this program. If you modify this program, you may extend this 
# exception to your version of the program, but you are not obliged to do so. If you
# do not wish to do so, delete this exception statement from your version.
# 
# For more information : contact@centreon.com
# 
# SVN : $URL: http://svn.centreon.com/trunk/centreon/bin/centTrapHandler-2.x $
# SVN : $Id: centTrapHandler-2.x 13319 2012-08-13 10:01:17Z jmathis $
#
####################################################################################
#
# Script init
#

use strict;
use DBI;

use vars qw($centrapmanager_daemon $centrapmanager_log_debug $centrapmanager_sleep $centrapmanager_use_trap_time
        $centrapmanager_net_snmp_perl_enable $centrapmanager_remove_backslash_from_quotes 
        $centrapmanager_dns_enable $centrapmanager_strip_domain @centrapmanager_strip_domain_list 
        $centrapmanager_duplicate_trap_window $centrapmanager_date_format $centrapmanager_time_format
        $centrapmanager_date_time_format $centrapmanager_cache_unknown_traps_enable $centrapmanager_cache_unknown_traps_retention
        $centrapmanager_cache_unknown_traps_file $centrapmanager_mode $spool_directory $centrapmanager_mibs_environment
        $centrapmanager_logfile $centrapmanager_cmd_timeout $centrapmanager_seperator
        $centrapmanager_cmdFile);
use vars qw($mysql_database_oreon $mysql_database_ods $mysql_host $mysql_user $mysql_passwd $debug $htmlentities);
use vars qw($etc $CENTREON_USER);

$CENTREON_USER = '@CENTREON_USER@';

use POSIX qw(strftime);
eval "use HTML::Entities";
if ($@) {
    $htmlentities = 0;
} else {
    $htmlentities = 1;
}

###############################
# Init 

require "@CENTREON_PATH@/lib/centreon-traplib.pm";

our $cmdFile;
$etc = "@CENTREON_ETC@";
my $config_centreon_trap = "centreon-trap.conf.pm";

###############################
# require config file

init_config($etc . "/conf.pm", 1);
init_config($etc . "/" . $config_centreon_trap, 1);

manage_params_conf();
init_modules();

our $agent_dns_name;
our $trap_date;
our $trap_time;
our $trap_date_time;
our $trap_date_time_epoch;
our @var;                      # Variables of trap received by SNMPTRAPD
our @entvar;                   # Enterprise variable values of trap received by SNMPTRAPD
our @entvarname;               # Enterprise variable names of trap received by SNMPTRAPD
our %duplicate_traps;
my $timetoreload = 0;
my $timetodie = 0;
our @filenames;
our $input;
our $dbh;
our $oids_cache;
our $last_cache_time;
our $whoami;

###############################
## Write into Log File
#
sub logit($$) {
    my ($log, $criticity) = @_;

    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time());
    open (LOG, ">> ".$centrapmanager_logfile) || print "can't write $centrapmanager_logfile: $!";
    printf LOG "[%04d-%02d-%02d %02d:%02d:%02d] [$criticity] %s\n", $year+1900, $mon+1, $mday, $hour, $min, $sec, $_[0];
    close LOG or warn $!;
}

###############################
## Execute a command Nagios or Centcore
#
sub send_command {
    eval {
        local $SIG{ALRM} = sub { die "TIMEOUT"; };
        alarm($centrapmanager_cmd_timeout);
        system @_;
        alarm(0);
    };
    if ($@) {
        if ($@ =~ "TIMEOUT") {
            logit("ERROR: Send command timeout", "EE");
            return 0;
        }
    }
    return 1;
}

###############################
## GET HOSTNAME FROM IP ADDRESS
#
sub get_hostinfos($$$) {
    my %host = ();

    my $sth = $_[0]->prepare("SELECT host_id, host_name FROM host WHERE host_address='$_[1]' OR host_address='$_[2]'");
    $sth->execute();
    while (my ($host_id, $host_name) = $sth->fetchrow_array()) {
        $host{$host_id} = $host_name;
    }
    $sth->finish();
    return %host;
}

###############################
## GET host location
#
sub get_hostlocation($$) {
    my $sth = $_[0]->prepare("SELECT localhost FROM host, `ns_host_relation`, nagios_server WHERE host.host_id = ns_host_relation.host_host_id AND ns_host_relation.nagios_server_id = nagios_server.id AND host.host_name = '".$_[1]."'");
    $sth->execute();
    if ($sth->rows()){
        my $temp = $sth->fetchrow_array();
        $sth->finish();
    	return $temp;
    } else {
    	return 0;
    }
}

##############################
## Connect to MySQL 
#
sub connectDB() {
    my $dbh = DBI->connect("dbi:mysql:".$mysql_database_oreon.";host=".$mysql_host, $mysql_user, $mysql_passwd) or myDie("Echec de la connexion");
    return $dbh;
}

##################################
## GET nagios server id for a host
#
sub get_hostNagiosServerID($$) {
    my $sth = $_[0]->prepare("SELECT id FROM host, `ns_host_relation`, nagios_server WHERE host.host_id = ns_host_relation.host_host_id AND ns_host_relation.nagios_server_id = nagios_server.id AND (host.host_name = '".$_[1]."' OR host.host_address = '".$_[1]."')");
    $sth->execute();
    if ($sth->rows()){
	my $temp = $sth->fetchrow_array();
	$sth->finish();
    	return $temp;
    } else {
    	return 0;
    }
}

#####################################################################
## GET SERVICES FOR GIVEN HOST (GETTING SERVICES TEMPLATES IN ACCOUNT)
#
sub getServicesIncludeTemplate($$$$) {
    my ($dbh, $sth_st, $host_id, $trap_id) = @_;
    my @service;
    $sth_st->execute();
    
    while (my @temp = $sth_st->fetchrow_array()) {
        my $tr_query = "SELECT `traps_id` FROM `traps_service_relation` WHERE `service_id` = '".$temp[0]."' AND `traps_id` = '".$trap_id."'";
        my $sth_st3 = $dbh->prepare($tr_query);
        $sth_st3->execute();
        my @trap = $sth_st3->fetchrow_array();
        if (defined($trap[0])) {
            $service[scalar(@service)] = $temp[1];
        } else {
            if (defined($temp[2])) {
                my $found = 0;
                my $service_template = $temp[2];
                while (!$found) {
                    my $st1_query = "SELECT `service_id`, `service_template_model_stm_id`, `service_description` FROM service s WHERE `service_id` = '".$service_template."'";
                    my $sth_st1 = $dbh->prepare($st1_query);
                    $sth_st1 -> execute();
                    my @st1_result = $sth_st1->fetchrow_array();
                    if (defined($st1_result[0])) {
                        my $sth_st2 = $dbh->prepare("SELECT `traps_id` FROM `traps_service_relation` WHERE `service_id` = '".$service_template."' AND `traps_id` = '".$trap_id."'");
                        $sth_st2->execute();
                        my @st2_result = $sth_st2->fetchrow_array();
                        if (defined($st2_result[0])) {
                            $found = 1;
                            $service[scalar(@service)] = $temp[1];
                        } else {
                            $found = 1;
                            if (defined($st1_result[1]) && $st1_result[1]) {
                                $service_template = $st1_result[1];
                                $found = 0;
                            }
                        }
                        $sth_st2->finish;		    
                    }
                    $sth_st1->finish;
                }
            }
        }
        $sth_st3->finish;
    }
    return (@service);
}



##########################
# GET SERVICE DESCRIPTION
#
sub getServiceInformations($$$)	{
    
    my $sth = $_[0]->prepare("SELECT `traps_id`, `traps_status`, `traps_submit_result_enable`, `traps_execution_command`, `traps_reschedule_svc_enable`, `traps_execution_command_enable`, `traps_advanced_treatment`, `traps_args` FROM `traps` WHERE `traps_oid` = '$_[1]'");
    $sth->execute();
    my ($trap_id, $trap_status, $traps_submit_result_enable, $traps_execution_command, $traps_reschedule_svc_enable, $traps_execution_command_enable, $traps_advanced_treatment, $traps_output) = $sth->fetchrow_array();
    return(undef) if (!defined $trap_id);
    $sth->finish();

    ######################################################
    # getting all "services by host" for given host
    my $st_query = "SELECT s.service_id, service_description, service_template_model_stm_id FROM service s, host_service_relation h";
    $st_query .= " where  s.service_id = h.service_service_id and h.host_host_id='$_[2]'";
    my $sth_st = $_[0]->prepare($st_query); 
    my @service = getServicesIncludeTemplate($_[0], $sth_st, $_[2], $trap_id);
    $sth_st->finish;

    ######################################################
    # getting all "services by hostgroup" for given host
    my $query_hostgroup_services = "SELECT s.service_id, service_description, service_template_model_stm_id FROM hostgroup_relation hgr,  service s, host_service_relation hsr";
    $query_hostgroup_services .= " WHERE hgr.host_host_id = '".$_[2]."' AND hsr.hostgroup_hg_id = hgr.hostgroup_hg_id";
    $query_hostgroup_services .= " AND s.service_id = hsr.service_service_id";
    $sth_st = $_[0]->prepare($query_hostgroup_services);
    $sth_st->execute();
    @service = (@service, getServicesIncludeTemplate($_[0], $sth_st, $_[2], $trap_id));
    $sth_st->finish;

    return $trap_id, $trap_status, $traps_submit_result_enable, $traps_execution_command, $traps_reschedule_svc_enable, $traps_execution_command_enable, $traps_advanced_treatment, $traps_output, \@service;
}

######################################
## Force a new check for selected services
#
sub forceCheck($$$$) {
    my ($dbh, $this_host, $this_service, $datetime) = @_;
    my $result;

    my $id = get_hostNagiosServerID($dbh, $this_host);
    if (defined($id) && $id != 0) {
        my $submit;
        
        if ($whoami eq $CENTREON_USER) {
            $submit = "/bin/echo \"EXTERNALCMD:$id:[$datetime] SCHEDULE_FORCED_SVC_CHECK;$this_host;$this_service;$datetime\" >> $cmdFile";
        } else {
            $submit = "su -l $CENTREON_USER -c '/bin/echo \"EXTERNALCMD:$id:[$datetime] SCHEDULE_FORCED_SVC_CHECK;$this_host;$this_service;$datetime\" >> $cmdFile'";
        }
        $result = send_command($submit);
	
        logit("FORCE: Reschedule linked service", "II");
        logit("FORCE: Launched command: $submit", "II");
	
    }
    return $result;
}

#######################################
## Submit result via external command
#
sub submitResult($$$$$$) {
    my ($dbh, $this_host, $this_service, $datetime, $status, $traps_output) = @_;
    my $result;

    # No matching rules
    my $id = get_hostNagiosServerID($dbh, $this_host);
    if (defined($id) && $id != 0) {
        my $str = "PROCESS_SERVICE_CHECK_RESULT;$this_host;$this_service;$status;$traps_output";

        my $submit;
        if ($whoami eq $CENTREON_USER) {
            $str =~ s/"/\\"/g;
            $submit = "/bin/echo \"EXTERNALCMD:$id:[$datetime] $str\" >> $cmdFile";
        } else {
            $str =~ s/'/'\\''/g;
            $str =~ s/"/\\"/g;
            $submit = "su -l $CENTREON_USER -c '/bin/echo \"EXTERNALCMD:$id:[$datetime] $str\" >> $cmdFile'";
        }
        $result = send_command($submit);
	
        logit("SUBMIT: Force service status via passive check update", "II");
        logit("SUBMIT: Launched command: $submit", "II");
    }
    return $result;
}

##########################
## REPLACE
#
sub substitute_string {
    my $str = $_[0];
    
    # Substitute @{oid_value} and $1, $2,...
    for (my $i=0; $i <= $#entvar; $i++) {
        my $x = $i + 1;
        $str =~ s/\@\{$entvarname[$i]\}/$entvar[$i]/g;
        $str =~ s/\$$x(\s|$)/$entvar[$i]/g;
    }
    
    # Substitute $*
    my $sub_str = join($centrapmanager_seperator, @entvar);
    $str =~ s/\$\*/$sub_str/g;
    
    # Clean OID
    $str =~ s/\@\{[\.0-9]*\}//g;
    return $str;
}

#######################################
## Check Advanced Matching Rules
#
sub checkMatchingRules($$$$$$$$$) {
    my ($dbh, $trap_id, $this_host, $this_service, $ip, $hostname, $traps_output, $datetime, $status) = @_;
    
    # Check matching options 
    my $sth = $dbh->prepare("SELECT tmo_regexp, tmo_status, tmo_string FROM traps_matching_properties WHERE trap_id = '".$trap_id."' ORDER BY tmo_order");
    $sth->execute();
    while (my ($regexp, $tmoStatus, $tmoString) = $sth->fetchrow_array()) {
        logit("[$tmoString][$regexp] => $tmoStatus", "DD") if ($centrapmanager_log_debug >= 2);
        
        my @temp = split(//, $regexp);
        my $i = 0;
        my $len = length($regexp);
        $regexp = "";
        foreach (@temp) {
            if ($i eq 0 && $_ =~ "/") {
                $regexp = $regexp . "";
            } elsif ($i eq ($len - 1) && $_ =~ "/") { 
                $regexp = $regexp . "";
            } else {
                $regexp = $regexp . $_;
            }
            $i++;
        }

        $tmoString = substitute_string($tmoString);

        ##########################
        # REPLACE special Chars
        if ($htmlentities == 1) {
            $tmoString = decode_entities($tmoString);
        } else {
            $tmoString =~ s/\&quot\;/\"/g;
            $tmoString =~ s/\&#039\;\&#039\;/"/g;
        }
        $tmoString =~ s/\@HOSTNAME\@/$this_host/g;
        $tmoString =~ s/\@HOSTADDRESS\@/$ip/g;
        $tmoString =~ s/\@HOSTADDRESS2\@/$hostname/g;
        $tmoString =~ s/\@SERVICEDESC\@/$this_service/g;
        $tmoString =~ s/\@TRAPOUTPUT\@/$traps_output/g;
        $tmoString =~ s/\@OUTPUT\@/$traps_output/g;
        $tmoString =~ s/\@TIME\@/$datetime/g;

        # Integrate OID Matching		    
        if (defined($tmoString) && $tmoString =~ m/$regexp/g) {
            $status = $tmoStatus;
            logit("Regexp: String:$tmoString => REGEXP:$regexp", "II");
            logit("Status: $status ($tmoStatus)", "II");
            last;
        }    
    }
    $sth->finish();
    return $status;
}

################################
## Execute a specific command
#
sub executeCommand($$$$$$$$) {
    my ($traps_execution_command, $this_host, $this_service, $ip, $hostname, $traps_output, $datetime, $status) = @_;
    
    $traps_execution_command = substitute_string($traps_execution_command);
    
    ##########################
    # REPLACE MACROS
    if ($htmlentities == 1) {
        $traps_execution_command = decode_entities($traps_execution_command);
    } else {
        $traps_execution_command =~ s/\&quot\;/\"/g;
        $traps_execution_command =~ s/\&#039\;\&#039\;/"/g;
        $traps_execution_command =~ s/\&#039\;/'/g;
    }
    $traps_execution_command =~ s/\@HOSTNAME\@/$this_host/g;
    $traps_execution_command =~ s/\@HOSTADDRESS\@/$_[1]/g;
    $traps_execution_command =~ s/\@HOSTADDRESS2\@/$_[2]/g;
    $traps_execution_command =~ s/\@SERVICEDESC\@/$this_service/g;
    $traps_execution_command =~ s/\@TRAPOUTPUT\@/$traps_output/g;
    $traps_execution_command =~ s/\@OUTPUT\@/$traps_output/g;
    $traps_execution_command =~ s/\@STATUS\@/$status/g;
    $traps_execution_command =~ s/\@TIME\@/$datetime/g;

    ##########################
    # SEND COMMAND
    if ($traps_execution_command) {
        logit("EXEC: Launch specific command", "II");
        logit("EXEC: Launched command: $traps_execution_command", "II");
	
        my $output = `$traps_execution_command`;
        if ($?) {
            logit("EXEC: Execution error: $!", "EE");
        }
        if ($output) {
            logit("EXEC: Output : $output", "II");
        }
    }
}


#######################################
## GET HOSTNAME AND SERVICE DESCRIPTION
#
sub getTrapsInfos($$$) {
    my $ip = shift;
    my $hostname = shift;
    my $oid = shift;
    
    my $status;

    my %host = get_hostinfos($dbh, $ip, $hostname);
    foreach my $host_id (keys %host) {
        my $this_host = $host{$host_id};
        my ($trap_id, $status, $traps_submit_result_enable, $traps_execution_command, $traps_reschedule_svc_enable, $traps_execution_command_enable, $traps_advanced_treatment, $traps_output, $ref_servicename) = getServiceInformations($dbh, $oid, $host_id);
        if (!defined($trap_id)) {
            return ;
        }
        my @servicename = @{$ref_servicename};
	
        foreach (@servicename) {
            my $this_service = $_;

            if ($centrapmanager_log_debug >= 2) {
                logit("Trap found on service \'$this_service\' for host \'$this_host\'.", "DD");
            }

            my $datetime = `date +%s`;
            chomp($datetime);

            $traps_output = substitute_string($traps_output);

            ######################################################################
            # Advanced matching rules
            if (defined($traps_advanced_treatment) && $traps_advanced_treatment eq 1) {
                $status = checkMatchingRules($dbh, $trap_id, $this_host, $this_service, $ip, $hostname, $traps_output, $datetime, $status);
            }

            #####################################################################
            # Submit value to passive service
            if (defined($traps_submit_result_enable) && $traps_submit_result_enable eq 1) { 
                submitResult($dbh, $this_host, $this_service, $datetime, $status, $traps_output);
            }

            ######################################################################
            # Force service execution with external command
            if (defined($traps_reschedule_svc_enable) && $traps_reschedule_svc_enable eq 1) {
                forceCheck($dbh, $this_host, $this_service, $datetime);
            }
	    
            ######################################################################
            # Execute special command
            if (defined($traps_execution_command_enable) && $traps_execution_command_enable) {
                executeCommand($traps_execution_command, $this_host, $this_service, $ip, $hostname, $traps_output, $datetime, $status);
            }
        }
    }
}

####################################
## GenerateError
#
sub myDie($) {
    logit($_[0], "EE");
    exit(1);
}

sub catch_zap_term {
    $timetodie = 1;
}

sub catch_zap_hup {
    $timetoreload = 1;
}

#########################################################
# Beginning
#

if ($centrapmanager_log_debug >= 1) {
    logit("centrapmaanger launched....", "DD");
    logit("PID: $$", "DD");
}

open my $centrapmanager_fh, '>>', $centrapmanager_logfile;
open STDOUT, '>&', $centrapmanager_fh;
open STDERR, '>&', $centrapmanager_fh;

$dbh = connectDB();
if ($centrapmanager_mode == 0) {
    $cmdFile = $centrapmanager_cmdFile;
} else {
    # Dirty!!! Need to know the poller
    my $sth = $dbh->prepare("SELECT `command_file` FROM `cfg_nagios` WHERE `nagios_activate` = '1' LIMIT 1");
    $sth->execute();
    my @conf = $sth->fetchrow_array();
    $cmdFile = $conf[0];
}
$whoami = getpwuid($<);

if ($centrapmanager_daemon == 1) {
    $SIG{TERM}  = \&catch_zap_term;
    $SIG{HUP} = \&catch_zap_hup;
    
    while (!$timetodie) {
        purge_duplicate_trap();
        while ((my $file = get_trap())) {
            logit("Processing file: $file", "DD") if ($centrapmanager_log_debug >= 1);
            
            if (open FILE, $spool_directory.$file) {
                $input = 'FILE';
                my $trap_is_a_duplicate = 0;
                my $readtrap_result = readtrap();
                
                if ($readtrap_result == 1) {
                    if (check_known_trap($var[3]) == 1) {
                        getTrapsInfos($var[1], $var[2], $var[3]);
                    }
                } elsif ($readtrap_result == 0) {
                     logit("Error processing trap file $file.  Skipping...", "DD") if ($centrapmanager_log_debug >= 1);
                } elsif ($readtrap_result == -1) {
                    $trap_is_a_duplicate = 1;
                    logit("Duplicate trap detected in trap file $file.  Skipping...", "II");
                }
                
                close FILE;
                unless (unlink($file)) {
                    logit("Unable to delete trap file $file from spool dir:$!", "EE");
                }
                
            } else {
                logit("Could not open trap file $spool_directory$file: ($!)", "EE");
            }
        }
        
        logit("Sleeping for $centrapmanager_sleep seconds", "DD") if ($centrapmanager_log_debug >= 1);
        sleep $centrapmanager_sleep;
                
        if ($timetoreload == 1) {
            logit("Reloading configuration file", "DD") if ($centrapmanager_log_debug >= 1);
            init_config($etc . "/conf.pm", 0);
            init_config($etc . "/" . $config_centreon_trap, 0);
            manage_params_conf();
            init_modules();
            get_cache_oids();
            $timetoreload = 0;
        }
    }
} else {
    $input = 'STDIN';
    my $readtrap_result = readtrap();
    if ($readtrap_result == 1) {
        if (check_known_trap($var[3]) == 1) {
            getTrapsInfos($var[1], $var[2], $var[3]);
        }
    } elsif ($readtrap_result == 0) {
        logit("Error processing trap file.  Skipping...", "DD") if ($centrapmanager_log_debug >= 1);
    }
    $dbh->disconnect();
}

__END__
