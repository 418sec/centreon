{extends file="file:[Core]viewLayout.tpl"}

{block name=title}Business Unit{/block}

{block name=content}
<div class="gridster">
    <ul>
	{foreach $buList as $bu}
		<li class="business-unit-ok widget-li" data-row="1" data-col="1" data-sizex="1" data-sizey="1">
			<div class="overlay_fix"></div>
            <div class="portlet-header bg-primary">
            	<span class="widgetTitle">
                	<span class="portlet-ui-icon">
                		<i class="fa fa-chain"></i>
                    	<i class="fa fa-refresh"></i>
                    	<i class="fa fa-gears widget-settings"></i>
                    	<i class="fa fa-trash-o widget-delete"></i>
              		</span>
          		</span>
          	</div>
			{*<div class="business-unit" onclick="location.href='{url_for url='/centreon-bam/businessactivity/'|cat:$bu.ba_id}'">*}
			<div class="business-unit panel panel-default">
              <div class="panel-heading">{$bu.name}</div>
              <div class="panel-body">
                <div id="business-unit-zoom" class="bam-zoom-tree" style="display: none;">
                
 				</div>
              </div>
			</div>
		</li>
	{/foreach}
    </ul>
</div>
{/block}

{block name="javascript-bottom" append}
<script>
var gridster;

$(function(){ //DOM Ready
 
    gridster = $(".gridster ul").gridster({
        widget_margins: [10, 10],
        widget_base_dimensions: [120, 120],
		draggable: {
        	handle: ".portlet-header",
            stop: function() {
            	$(".overlay_fix").hide();
                savepos();
            },
            start: function() {
            	$(".overlay_fix").show();
            }
        },
		resize: {
        	enabled: true,
            stop: function() {
            	$(".overlay_fix").hide();
                savepos();
            },
            start: function() {
            	$(".overlay_fix").show();
            }
        }
    }).data('gridster');

{*	gridster.add_widget('<li class="business-unit-ok">new widget</li>', 2, 1);*}

	gridster.$el
          .one('click', '> li', function() {
   		   var self = this;
			$.ajax({
              	url: '/data/bu1.json',
				success: function(data, textStatus, jqXHR) {
                  $(self).one('transitionend', function() {
                    var self = this;
			        $(self).find('.bam-zoom-tree').show();
                    var width = $(self).find('.bam-zoom-tree').parent().width();
                    var height = $(self).find('.bam-zoom-tree').parent().height();
				  	var svg = $(self).find('.bam-zoom-tree > svg')[0];
				  	$(svg).width(width).height(height);
                  });
                  gridster.resize_widget($(self), 7, 5);
				}
			  });
          });


{*	$(".widget-li").mouseenter(function() {
    	$(this).children(".portlet-header").show();
    }).mouseleave(function() {
    		$(this).children(".portlet-header").hide();
    	})
*}


var root = {
 "name": "Sales",
 "children": [
  {
   "name": "CRM",
   "children": [
    {
     "name": "Systemic Theory",
     "children": [
      { "name": "test1", "value": 3938, "url": "http://polisci.osu.edu" },
      { "name": "test2", "value": 743, "url": "http://polisci.osu.edu" }
     ]
    },
    {
     "name": "Kayako",
     "children": [
      { "name": "test2", "value": 3416, "url": "http://google.com" },
      { "name": "test4", "value": 3416, "url": "http://bing.com" }
     ]
    }
    ]
  }
]
};

var margin = { top: 30, right: 0, bottom: 0, left: 0 },
    width = 960,
    height = 500 - margin.top - margin.bottom,
    formatNumber = d3.format(",d"),
    transitioning;

var x = d3.scale.linear()
    .domain([0, width])
    .range([0, width]);

var y = d3.scale.linear()
    .domain([0, height])
    .range([0, height]);

var treemap = d3.layout.treemap()
    .children(function(d, depth) { return depth ? null : d._children; })
    .sort(function(a, b) { return a.value - b.value; })
    .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
    .round(false);

console.log(treemap);

var svg = d3.select("#business-unit-zoom").append("svg")
    /* .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.bottom + margin.top) */
    .style("margin-left", -margin.left + "px")
    .style("margin.right", -margin.right + "px")
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
    .style("shape-rendering", "crispEdges");

var grandparent = svg.append("g")
    .attr("class", "grandparent");

grandparent.append("rect")
    .attr("y", -margin.top)
    .attr("width", width)
    .attr("height", margin.top);

grandparent.append("text")
    .attr("x", 6)
    .attr("y", 6 - margin.top)
    .attr("dy", ".75em");

  initialize(root);
  accumulate(root);
  layout(root);
  display(root);

  function initialize(root) {
    root.x = root.y = 0;
    root.dx = width;
    root.dy = height;
    root.depth = 0;
  }

  // Aggregate the values for internal nodes. This is normally done by the
  // treemap layout, but not here because of our custom implementation.
  // We also take a snapshot of the original children (_children) to avoid
  // the children being overwritten when when layout is computed.
  function accumulate(d) {
    return (d._children = d.children)
        ? d.value = d.children.reduce(function(p, v) { return p + accumulate(v); }, 0)
        : d.value;
  }

  // Compute the treemap layout recursively such that each group of siblings
  // uses the same size (1×1) rather than the dimensions of the parent cell.
  // This optimizes the layout for the current zoom state. Note that a wrapper
  // object is created for the parent node for each group of siblings so that
  // the parent’s dimensions are not discarded as we recurse. Since each group
  // of sibling was laid out in 1×1, we must rescale to fit using absolute
  // coordinates. This lets us use a viewport to zoom.
  function layout(d) {
    if (d._children) {
      treemap.nodes({ _children: d._children });
      d._children.forEach(function(c) {
        c.x = d.x + c.x * d.dx;
        c.y = d.y + c.y * d.dy;
        c.dx *= d.dx;
        c.dy *= d.dy;
        c.parent = d;
        layout(c);
      });
    }
  }

  function display(d) {
    grandparent
        .datum(d.parent)
        .on("click", transition)
      .select("text")
        .text(name(d));

    var g1 = svg.insert("g", ".grandparent")
        .datum(d)
        .attr("class", "depth");

    var g = g1.selectAll("g")
        .data(d._children)
      .enter().append("g");

    g.filter(function(d) { return d._children; })
        .classed("children", true)
        .on("click", transition);

    g.selectAll(".child")
        .data(function(d) { return d._children || [d]; })
      .enter().append("rect")
        .attr("class", "child")
        .call(rect);

    g.append("rect")
        .attr("class", "parent")
        .call(rect)
      .append("title")
        .text(function(d) { return formatNumber(d.value); });

    g.append("text")
        .attr("dy", ".75em")
        .text(function(d) { return d.name; })
        .call(text);

    function transition(d) {
      if (transitioning || !d) return;
      transitioning = true;

      var g2 = display(d),
          t1 = g1.transition().duration(750),
          t2 = g2.transition().duration(750);

      // Update the domain only after entering new elements.
      x.domain([d.x, d.x + d.dx]);
      y.domain([d.y, d.y + d.dy]);

      // Enable anti-aliasing during the transition.
      svg.style("shape-rendering", null);

      // Draw child nodes on top of parent nodes.
      svg.selectAll(".depth").sort(function(a, b) { return a.depth - b.depth; });

      // Fade-in entering text.
      g2.selectAll("text").style("fill-opacity", 0);

      // Transition to the new view.
      t1.selectAll("text").call(text).style("fill-opacity", 0);
      t2.selectAll("text").call(text).style("fill-opacity", 1);
      t1.selectAll("rect").call(rect);
      t2.selectAll("rect").call(rect);

      // Remove the old node when the transition is finished.
      t1.remove().each("end", function() {
        svg.style("shape-rendering", "crispEdges");
        transitioning = false;
      });
    }

    return g;
  }

  function text(text) {
    text.attr("x", function(d) { return x(d.x) + 6; })
        .attr("y", function(d) { return y(d.y) + 6; });
  }

  function rect(rect) {
    rect.attr("x", function(d) { return x(d.x); })
        .attr("y", function(d) { return y(d.y); })
        .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
        .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
  }

  function name(d) {
    return d.parent
        ? name(d.parent) + "." + d.name
        : d.name;
  }


});
</script>
{/block}
